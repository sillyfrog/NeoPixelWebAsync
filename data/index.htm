<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <title>LEGO Lights!</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS"
    crossorigin="anonymous">
  <link rel="stylesheet" href="/style.css" />


  <script src="jscolor.js"></script>
  <script>

    COLOR_PICKER = 'cp';
    DURATION = 'dur';

    COLOR_UPDATE = "U\n";
    SCHEME_UPDATE = "S\n";



    LED_SCHEMES = {
      'none': { 'start': COLOR_PICKER },
      'fade': { 'start': COLOR_PICKER, 'end': COLOR_PICKER, 'dur': DURATION },
      'fadeoneway': { 'start': COLOR_PICKER, 'end': COLOR_PICKER, 'dur': DURATION },
      'flicker': { 'start': COLOR_PICKER, 'end': COLOR_PICKER, 'dur': DURATION, 'altdur': DURATION }
    };
    var schemes = {};
    var databack = false;
    var metadata = {};
    var forcecleartable = false;

    function getActiveConfig() {
      fetch('/config').
        then(function (response) {
          return response.json();
        })
        .then(function (response) {
          databack = response;
        })
        .then(updateTable)
        .catch(error => console.error(error));
    }

    function startRefresh() {
      fetch('/schemes.txt').
        then(function (response) {
          return response.text();
        })
        .then(updateSchemes)
        .catch(error => console.error(error));
      getFile('/stripdata.txt', function (response) {
        document.getElementById("stripsizes").value = response;
      });
      startSocket();
    }

    function updateSchemes(data) {
      lines = data.split('\n');
      for (line of lines) {
        parts = line.split(':', 2);
        console.log("Working:", parts);
        if (parts.length == 2) {
          i = parseInt(parts[0]);
          data = JSON.parse(line.substring(parts[0].length + 1));
          schemes[i] = data;
        }
      }
      getActiveConfig();
      getMetaData();
    }

    function setColor(led, color) {
      //var formData = new FormData();
      //formData.append(led, color);

      ws.send(COLOR_UPDATE + JSON.stringify({ "led": led, "color": color }));
      console.log("Sent Update via WS");
    }

    function setScheme() {
      document.getElementById("setschemebtn").innerText = "Saving...";
      var schemedata = "";
      for (i = 0; i < databack["colors"].length; i++) {
        if (schemes[i]) {
          schemedata += i + ":" + JSON.stringify(schemes[i]) + "\n";
        }
      }
      console.log("Final data:", schemedata);
      setFile("/schemes.txt", schemedata,
        function () {
          fetch('/updatescheme').
            then(function (response) {
              return response.text();
            })
            .then(function (resp) {
              console.log("Update scheme:", resp);
              document.getElementById("setschemebtn").style.display = "none";
              document.getElementById("setschemebtn").innerText = "Save LED Schemes";
            })
            .catch(error => console.error("Update scheme error:", error));
        });
    }

    function editScheme() {
      var e = document.createElement("div");
      e._led = this._led;

      var scheme = schemes[this._led];

      var options = document.createElement("select");
      for (var schemename in LED_SCHEMES) {
        var opt = document.createElement("option");
        opt.value = schemename;
        opt.innerText = schemename;
        if (schemename == scheme['sc']) {
          opt.selected = true;
        }
        options.appendChild(opt);
      }
      options._led = this._led;
      options.name = "sc";
      options.onchange = function () { newScheme(this); };
      e.appendChild(options);
      this.replaceWith(e);
      newScheme(options);
    }

    function newScheme(e) {
      // Remove all other child elements, then rebuild
      while (e.nextSibling) {
        e.nextSibling.remove();
      }

      var scheme = schemes[e._led];

      schemecontrols = LED_SCHEMES[e.value];
      for (var control in schemecontrols) {
        type = schemecontrols[control];
        var val = scheme[control];
        if (type == COLOR_PICKER) {
          var field = document.createElement('input');
          field.name = control;
          field.size = 8;
          var picker = new jscolor(field);
          if (!val) {
            val = "000000";
          }
          picker.fromString(val);
        }
        else if (type == DURATION) {
          var field = document.createElement('input');
          field.type = "number";
          field.step = "0.04";
          field.min = 0;
          field.name = control;
          field.style.maxWidth = "4em";
          if (!val) {
            val = "1000";
          }
          field.value = parseInt(val) / 1000;
          field.getValue = function () {
            return parseInt(parseFloat(this.value) * 1000);
          }
        }
        else {
          var field = document.createElement('p');
          field.innerText = "Unknown type: " + control;
        }
        field._led = e._led;
        e.parentNode.appendChild(field);
      }
      if (schemecontrols) {
        var field = document.createElement('button');
        field.innerText = "Done";
        field.onclick = saveScheme;
        e.parentNode.appendChild(field);
      }
    }

    function saveScheme() {
      var e = this.parentNode;
      var node = e.firstChild;
      var scheme = {};
      while (node) {
        if (node.name) {
          if (node.getValue) {
            scheme[node.name] = node.getValue();
          } else {
            scheme[node.name] = node.value;
          }
        }
        node = node.nextSibling;
      }
      schemes[e._led] = scheme;
      schemeCell(e.parentNode, e._led);
      // XXX try updating via web socket
      data = schemes[e._led];
      //data['led'] = e._led;
      ws.send(SCHEME_UPDATE + e._led + "\n" + JSON.stringify(data));
      console.log("Sent Scheme via WS");
      document.getElementById("setschemebtn").style.display = "";
    }

    function brightness(c) {
      // Returns brightnes, 0-203.975
      if (c) {
        var c = c.substring(1);      // strip #
        var rgb = parseInt(c, 16);   // convert rrggbb to decimal
        var r = (rgb >> 16) & 0xff;  // extract red
        var g = (rgb >> 8) & 0xff;  // extract green
        var b = (rgb >> 0) & 0xff;  // extract blue

        var luma = 0.2126 * r + 0.7152 * g + 0.0722 * b; // per ITU-R BT.709

        return luma;
      } else {
        return 200;
      }
    }

    function schemeCell(oldcell, i) {
      var cell = document.createElement('td');
      var p = document.createElement('p');

      var scheme = schemes[i];
      if (!scheme) {
        scheme = { 'sc': 'none' };
        schemes[i] = scheme;
      }

      var html = '<p><b>' + scheme['sc'] + "</b><br/>";
      var schemecontrols = LED_SCHEMES[scheme['sc']];
      var donebr = false;
      for (var control in schemecontrols) {
        type = schemecontrols[control];
        var val = scheme[control];
        if (type == COLOR_PICKER) {
          if (brightness(val) < 40) {
            colsty = 'color: white;';
          }
          else {
            colsty = 'color: black;';
          }
          html += '<span style="background-color: #' + val +
            ';padding: 4px;border: black solid 1px;' + colsty + '">' + val + '</span>';
        }
        else if (type == DURATION) {
          if (!donebr) {
            //html += '<br/>';
          }
          html += ' <span>' + val / 1000 + 's</span>';
        }
        else {
          html += "Unknown type: " + control;
        }
      }
      html += '</p>';
      p.innerHTML = html;

      var button = document.createElement('button');
      button.innerText = "Edit Scheme";
      button._led = i;
      button.onclick = editScheme;
      cell.appendChild(p);
      cell.appendChild(button);
      oldcell.replaceWith(cell);
    }

    function getMetaData() {
      getFile('/metadata.json', function (response) {
        metadata = JSON.parse(response);
        forcecleartable = true;
        updateTable();
      });
    }

    function setMetaData() {
      setFile('/metadata.json', JSON.stringify(metadata));
    }

    function getFile(filename, callfunc) {
      fetch(filename).
        then(function (response) {
          return response.text();
        })
        .then(function (response) {
          callfunc(response);
        })
        .catch(error => console.error("Error getting file:", error));
    }

    function setFile(filename, datastr, completefunc) {
      if (!completefunc) {
        completefunc = function () { };
      }
      var formData = new FormData();
      formData.append('data', new Blob([datastr]), filename);
      fetch('/edit', {
        method: "POST",
        body: formData
      })
        .then(function (res) { console.log("setFile:", filename, res) })
        .then(completefunc)
        .catch(error => console.error("setFile Error:", error));
    }

    function saveSize() {
      var e = document.getElementById("stripsizes");
      var sizeinfo = e.value;
      sizeinfo = sizeinfo.replace("\r", "");
      if (sizeinfo.substring(sizeinfo.length - 1) != "\n") {
        sizeinfo += "\n";
      }
      setFile('/stripdata.txt', sizeinfo);
    }

    function updateTable() {
      if (!databack) {
        console.log("Ain't got nothing... No table updates");
        return;
      }
      var body = document.getElementById("tablebody");
      var i = 0;

      if (forcecleartable) {
        while (body.rows.length) {
          console.log('length', body.rows.length);
          body.rows[0].remove();
        }
        forcecleartable = false;
      }

      while (body.rows.length < databack["colors"].length) {
        console.log("i:", i, "Color:", databack["colors"][i]);
        var row = body.insertRow(-1);
        var cell = document.createElement('td');
        cell.innerText = i;
        row.appendChild(cell);

        cell = row.insertCell(-1);
        var field = document.createElement('input');
        field._led = i;
        field.size = 8;
        var picker = new jscolor(field);
        picker.fromString(databack["colors"][i]);
        field.onchange = function () {
          console.log("CHANGE", this._led, this.value);
          setColor(this._led, this.value);
        }
        cell.appendChild(field);

        cell = row.insertCell(-1);
        schemeCell(cell, i);

        cell = row.insertCell(-1);
        field = document.createElement('input');
        var comment = metadata[i];
        if (!comment) {
          comment = '';
        }
        field.value = comment;
        field._led = i;
        field.onchange = function () {
          metadata[this._led] = this.value;
        }
        cell.append(field);

        i++;
      }
    }

    // Websocket Stuff
    var ws = null;
    function ge(s) { return document.getElementById(s); }
    function ce(s) { return document.createElement(s); }
    function sendBlob(str) {
      var buf = new Uint8Array(str.length);
      for (var i = 0; i < str.length; ++i) buf[i] = str.charCodeAt(i);
      ws.send(buf);
    }

    function startSocket() {
      ws = new WebSocket('ws://' + document.location.host + '/ws', ['lights']);
      ws.binaryType = "arraybuffer";
      ws.onopen = function (e) {
        console.log("Connected");
      };
      ws.onclose = function (e) {
        console.log("Disconnected, will reconnect in 2 second");
        setTimeout(function () {
          startSocket();
        }, 2000);
      };
      ws.onerror = function (e) {
        console.log("WS Error", e);
        ws.close();
      };
      ws.onmessage = function (e) {
        var msg = "";
        if (e.data instanceof ArrayBuffer) {
          msg = "BIN:";
          var bytes = new Uint8Array(e.data);
          for (var i = 0; i < bytes.length; i++) {
            msg += String.fromCharCode(bytes[i]);
          }
        } else {
          msg = "TXT:" + e.data;
        }
        console.log(msg);
      };
      /*
      ge("input_el").onkeydown = function (e) {
        if (e.keyCode == 13 && ge("input_el").value != "") {
          ws.send(ge("input_el").value);
          ge("input_el").value = "";
        }
      }
      */
    }

    function doRainbow() {
      fetch('/rainbow')
        .then(function (response) {
          console.log("Doing rainbow!");
        })
        .catch(error => console.error(error));
    }
  </script>
</head>

<body onLoad="startRefresh();">
  <h1>LEGO Lights!</h1>
  <table class="table table-striped ">
    <thead>
      <tr>
        <th>LED</th>
        <th>Colour</th>
        <th>Scheme</th>
        <th>Comment</th>
      </tr>
    </thead>
    <tbody id="tablebody">
    </tbody>
  </table>

  <button onclick="setScheme();" class="btn btn-primary" style="position: fixed;top: 10px;right: 10px;display: none;"
    id="setschemebtn">Save LED Schemes</button>
  <p>&nbsp;</p>

  <button onclick="doRainbow();" class="btn btn-success">Do Rainbow!</button>
  <p>&nbsp;</p>
  <div>
    <textarea id="stripsizes">20</textarea>
    <button onclick="saveSize();">Save and Reboot</button>
  </div>
</body>

</html>