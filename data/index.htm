<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <title>LEGO Lights!</title>
  <link rel="stylesheet" href="/static/style.css" />
  <style>
    table {
      border-collapse: collapse;
    }

    table th,
    table td {
      border: solid 1px #cccccc;
      padding: 3px;
    }
  </style>

  <script src="jscolor.js"></script>
  <script>

    COLOR_PICKER = 'cp';
    DURATION = 'dur';

    LED_SCHEMES = {
      'none': {},
      'fade': { 'start': COLOR_PICKER, 'end': COLOR_PICKER, 'dur': DURATION },
      'fadeoneway': { 'start': COLOR_PICKER, 'end': COLOR_PICKER, 'dur': DURATION },
      'flicker': { 'start': COLOR_PICKER, 'end': COLOR_PICKER, 'dur': DURATION, 'altdur': DURATION }
    };
    var schemes = {};
    var databack = false;
    var metadata = {};
    var forcecleartable = false;

    function getActiveConfig() {
      fetch('/config').
        then(function (response) {
          return response.json();
        })
        .then(function (response) {
          databack = response;
        })
        .then(updateTable)
        .catch(error => console.error(error));
    }

    function startRefresh() {
      fetch('/schemes.json').
        then(function (response) {
          return response.json();
        })
        .then(updateSchemes)
        .catch(error => console.error(error));
    }

    function updateSchemes(data) {
      schemes = data;
      getActiveConfig();
      getMetaData();
    }

    function setColor(led, color) {
      //var formData = new FormData();
      //formData.append(led, color);
      fetch('/update?' + led + "=" + color)
        .then(function (res) { console.log(res) })
        .catch(error => console.error(error));
    }

    function setScheme() {
      var formData = new FormData();
      formData.append('data', JSON.stringify(schemes));
      fetch('/setscheme', {
        method: "POST",
        body: formData
      })
        .then(function (res) { console.log("setScheme: ", res) })
        .catch(error => console.error("setScheme Error", error));
      setMetaData();
    }

    function editScheme() {
      var e = document.createElement("div");
      e._led = this._led;

      var scheme = schemes[this._led];

      var options = document.createElement("select");
      for (var schemename in LED_SCHEMES) {
        var opt = document.createElement("option");
        opt.value = schemename;
        opt.innerText = schemename;
        if (schemename == scheme['sc']) {
          opt.selected = true;
        }
        options.appendChild(opt);
      }
      options._led = this._led;
      options.name = "sc";
      options.onchange = function () { newScheme(this); };
      e.appendChild(options);
      this.replaceWith(e);
      newScheme(options);
    }

    function newScheme(e) {
      // Remove all other child elements, then rebuild
      while (e.nextSibling) {
        e.nextSibling.remove();
      }

      var scheme = schemes[e._led];

      schemecontrols = LED_SCHEMES[e.value];
      for (var control in schemecontrols) {
        type = schemecontrols[control];
        var val = scheme[control];
        if (type == COLOR_PICKER) {
          var field = document.createElement('input');
          field.name = control;
          var picker = new jscolor(field);
          if (!val) {
            val = "000000";
          }
          picker.fromString(val);
        }
        else if (type == DURATION) {
          var field = document.createElement('input');
          field.type = "number";
          field.step = "0.04";
          field.min = 0;
          field.name = control;
          if (!val) {
            val = "1000";
          }
          field.value = parseInt(val) / 1000;
          field.getValue = function () {
            return parseInt(parseFloat(this.value) * 1000);
          }
        }
        else {
          var field = document.createElement('p');
          field.innerText = "Unknown type: " + control;
        }
        field._led = e._led;
        e.parentNode.appendChild(field);
      }
      if (schemecontrols) {
        var field = document.createElement('button');
        field.innerText = "Done";
        field.onclick = saveScheme;
        e.parentNode.appendChild(field);
      }
    }

    function saveScheme() {
      var e = this.parentNode;
      var node = e.firstChild;
      var scheme = {};
      while (node) {
        if (node.name) {
          if (node.getValue) {
            scheme[node.name] = node.getValue();
          } else {
            scheme[node.name] = node.value;
          }
        }
        node = node.nextSibling;
      }
      schemes[e._led] = scheme;
      schemeCell(e.parentNode, e._led);
    }

    function schemeCell(oldcell, i) {
      var cell = document.createElement('td');
      var p = document.createElement('p');

      var scheme = schemes[i];
      if (!scheme) {
        scheme = { 'sc': 'none' };
        schemes[i] = scheme;
      }

      p.innerText = JSON.stringify(scheme);
      var button = document.createElement('button');
      button.innerText = "Edit Scheme";
      button._led = i;
      button.onclick = editScheme;
      cell.appendChild(p);
      cell.appendChild(button);
      oldcell.replaceWith(cell);
    }

    function getMetaData() {
      fetch('/metadata.json').
        then(function (response) {
          return response.json();
        })
        .then(function (response) {
          metadata = response;
          forcecleartable = true;
        })
        .then(updateTable)
        .catch(error => console.error(error));
    }

    function setMetaData() {
      var formData = new FormData();
      formData.append('data', new Blob([JSON.stringify(metadata)]), '/metadata.json');
      fetch('/edit', {
        method: "POST",
        body: formData
      })
        .then(function (res) { console.log("setMetaData: ", res) })
        .catch(error => console.error("setMetaData Error", error));
    }

    function updateTable() {
      if (!databack) {
        console.log("Ain't got nothing... No table updates");
        return;
      }
      var body = document.getElementById("tablebody");
      var i = 0;

      if (forcecleartable) {
        while (body.rows.length) {
          console.log('length', body.rows.length);
          body.rows[0].remove();
        }
        forcecleartable = false;
      }

      while (body.rows.length < databack["colors"].length) {
        console.log("i:", i, "Color:", databack["colors"][i]);
        var row = body.insertRow(-1);
        var cell = document.createElement('td');
        cell.innerText = i;
        row.appendChild(cell);

        cell = row.insertCell(-1);
        var field = document.createElement('input');
        field._led = i;
        var picker = new jscolor(field);
        picker.fromString(databack["colors"][i]);
        field.onchange = function () {
          console.log("CHANGE", this._led, this.value);
          setColor(this._led, this.value);
        }
        cell.appendChild(field);

        cell = row.insertCell(-1);
        schemeCell(cell, i);

        cell = row.insertCell(-1);
        field = document.createElement('input');
        var comment = metadata[i];
        if (!comment) {
          comment = '';
        }
        field.value = comment;
        field._led = i;
        field.onchange = function () {
          metadata[this._led] = this.value;
        }
        cell.append(field);

        i++;
      }
    }

  </script>
</head>

<body onLoad="startRefresh();">
  <h1>LEGO Lights!</h1>
  <table>
    <thead>
      <tr>
        <th>LED</th>
        <th>Colour</th>
        <th>Scheme</th>
        <th>Comment</th>
      </tr>
    </thead>
    <tbody id="tablebody">
    </tbody>
  </table>
  <button onclick="setScheme();">Save LED Schemes</button>
</body>

</html>